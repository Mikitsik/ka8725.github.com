I"<s<h3 id="excursus">Excursus</h3>

<p>A few days ago I meet a friend of mine. He has several questions for me and my experience. Almost all of them relate to the job I’ve done recently. Despite the fact the questions are from various topics, I catch myself giving almost the same answer to all of them. It sounds like, “Use <strong>dry-struct</strong>”. After that, I remember I’ve told similar stories to other people before. That makes me very surprised and anxious, because I realize how important and useful this tool is. Unfortunately, some of my friends even don’t understand why this tool exists at all.</p>

<p>In this post, I’m trying to reveal these questions and answers for people already seeking the same information as my friend did. I also set a goal to show what problems <strong>dry-struct</strong> actually solves to people not understanding its motivation. I want to show why this tool is very important and why it’s a step forward to a much more comfortable development process in Ruby world.</p>

<h3 id="questions-and-answers">Questions and answers</h3>

<h4 id="1-andrey-ive-heard-you-have-experience-with-graphql-but-what-is-your-attitude-to-it-i-prefer-json-api-and-dont-see-graphql-benefits">1. Andrey, I’ve heard you have experience with GraphQL. But what is your attitude to it? I prefer JSON API and don’t see GraphQL benefits.</h4>

<p>Well, first of all before comparing them one should understand that JSON is just a format that specifies data. And usually this data is supposed to go from one “program/service/server/process/whatever” to another “program/service/server/process/whatever”. Let’s agree on “program/service/server/process/whatever” is a black-boxed service that can be either back-end or front-end process and from now on we call it just <strong>process</strong>.</p>

<p>Note, processes can be written in different programming languages as JSON is language-agnostic. Basically, this is just a set of rules that specify data going from Process A to Process B (more about JSON is in <a href="https://tools.ietf.org/html/rfc7159">rfc7159</a>):</p>

<p><img src="/images/json-pipe.png" alt="JSON as a language-agnostic data interchange format" /></p>

<p>The red pipe in the picture above is a transport protocol responsible for data delivery. And inside this pipe some data interchanges in JSON format. That’s it, JSON is only just a properly formatted <strong>string</strong>, nothing more.
Note, the protocol can be HTTP, RPC, AMQP, etc., and even just a method call inside the same process!</p>

<p>But before sending this string a process needs to build it from objects residing in its memory. That action is called <strong>serialization</strong>. Moreover, a process that receives the data needs to build corresponding objects inside its memory back. That action is called <strong>deserialization</strong>. Fortunately, for these actions, there are ready tools for almost all programming languages. Ruby and JavaScript are not exceptions here.</p>

<p>Unfortunately, a properly serialized JSON <strong>doesn’t guarantee</strong> correct functioning of the process deserializes it. Consider the following scenario. There is defined JSON data <code class="highlighter-rouge">{title: "A post", body: "Some text"}</code>. It’s good now for both processes: a process-sender freely serializes it and a process-receiver freely deserializes it. The processes themselves are working properly in integration, i.e. they are speaking the same language. Now, something changes on the sender side and the “title” field gets renamed to “name” spontaneously. With dynamic programming languages, a spontaneous change like that happens often, especially when the data is generated by some “magic” (hello, Ruby!). So the data structure implicitly changes to <code class="highlighter-rouge">{name: "A post", body: "Some text"}</code>. Now, what does happen with the receiving side, if these changes are not aligned? Of course, it fails. In the case of JavaScript, it processes the data improperly showing an empty title instead of expected “A post” on UI. In any case, an innocent change introduces a bug.</p>

<p>How to prevent this issue? Manual testing? For sure, it’s possible to test everything manually. Whenever something changes, someone needs to run the corresponding processes and see if they work in integration. It’s maybe ok if there are only two processes like for a Web application - back-end is on Ruby and front-end is on JavaScript. It’s not a problem to open a browser and click around. But even that doesn’t guarantee there is no regression. Usually, there are some tricky scenarios or not popular places easy to forget, especially when there are missing testing scenarios. It’s easy not to spot a tiny thing on UI that at first glance looks correct, but in fact, it’s wrong. Therefore, someone needs to read the code of the receiving processes and exclude usage of the old name in <strong>all</strong> places.</p>

<p>If it’s not much code and there are no many processes, this may be acceptable. But if there are many processes? For example, additionally to our Web UI there are iOS, Android, with hundreds of versions, etc. And for each process, there is a separate responsible person/team. Then this an easy task to check for regression turns into a painless and long activity. It leads to unnecessary communication and monkey business in the flesh of manual testing.</p>

<p>Eventually, manual testing doesn’t guarantee anything, because there is always a chance to miss something. Remember, the change in the example above happened spontaneously. Nobody knows about this change in the data at all! It’s easy to miss the bug and deploy on production without manual testing.</p>

<p>This is a typical case in Rails world: a field gets renamed on a table, the unit tests are run and green, the code is read on the back-end side, and it’s guaranteed that nothing uses the old field on the back-end side. Deploy to production, open a browser, and oops :(</p>

<p>Integration tests would solve this issue if they had covered related code to the change. This is a much more powerful approach and carefully written scenarios may solve the issue entirely. There are downsides of integration tests, though. First, they run too slow. That’s why they may impact the development cycle. Second, the high cost that consists of maintenance, CI time, and implementation. Despite these obstacles, this is a very important part of an application with production deployment. It helps to make code changes confidently not giving harm to the business.</p>

<p>But it’s possible to reduce the cost. If the processes talked between each other by some <strong>contract</strong>, its violation would mean that integration is broken immediately:</p>

<p><img src="/images/json-contract.png" alt="Contract between services" /></p>

<p>A contract here is some specification that’s understandable for both processes. It supposes to fail instantly if the data doesn’t correspond to the contract during serialization or deserialization.</p>

<p>And here GraphQL comes into play. The point is that it has an implementation of a contract like that out of the box. It’s called “schema” there. It’s not possible to generate or receive data that doesn’t correspond to the schema. If the schema takes part in the unit tests, smoke testing is enough to make sure the integration works. And these tests are much cheaper.</p>

<p>This is not the only thing GraphQL solves out of the box. The schema is actually a set of all possible fields connected with each other. All the charm of GraphQL is that a receiving process can specify <strong>only those</strong> data it needs, no less no more. And for all of that, there is <strong>only one</strong> endpoint instead of a forest REST endpoints with weird names.</p>

<p>In my opinion, the winner is GraphQL here. It’s highly recommended for a sustainable relatively big application. But for MVP or PoC it may be redundant.</p>

<p>One might argue there are other commonly accepted ways to build a contract like that: <a href="https://docs.pact.io/">Pact</a>, <a href="https://json-schema.org/">JSON-schema</a>, <a href="https://swagger.io/">Swagger</a>, and others. But they are subtly different from GraphQL. They are fixing the problem with JSON by adding one more complex technology to an already complicated stack. With GraphQL we have just one technology (not an easy one, though) that has everything necessary built-in.</p>

<blockquote>
  <p>For those who are convinced this a technology worth to look at, there is an official <a href="https://graphql.org/">place</a> to start with.</p>
</blockquote>

<p>Ok, but how all of that relates to <strong>dry-struct</strong>? It turns out, a structure defined with <strong>dry-struct</strong> is a schema as well. It has fields with known types and connections between them, similar to GraphQL. It’s easy to serialize data into and deserialize from JSON.</p>

<p>What eventually means, <strong>dry-struct</strong> can be used with the same respect as GraphQL for communication between processes. But with one caveat. The both ends should be written in Ruby. This way it would be possible to share <strong>dry-struct</strong> between sending/receiving processes, so that the transmitted data can be easily validated against the schema. Otherwise, we would need to synchronize a <strong>dry-struct</strong> schema between a place it’s defined (in Ruby, of course) and a place cannot reuse Ruby definitions. To implement this kind of synchronization, there should be made some tool transforms the <strong>dry-struct</strong> schema to a commonly used format this other language supports.</p>

<p>Briefly speaking, GraphQL and <strong>dry-struct</strong> are tools allow to define a strict API between processes. With a strict API it’s easier to maintain the code, and add new functionality. By strict I mean instant feedback about possibility or impossibility for a change in the code.</p>

<p>Now, consider there is only one Ruby process and internal method calls are used for data interchange. This situation is possible when a monolithic application is split into isolated modules communicate via some “remote” protocol. In this case, a structure specified by <strong>dry-struct</strong> can be used as an API schema and a contract, JSON can be used as a data transport format.</p>

<p>This is how it was implemented on a project from my experience:</p>
<ul>
  <li>the dry structs are defined in a “repository1”</li>
  <li>“repository2” and “repository3” are just Ruby applications having “repository1” as a dependency, so that any change in the “schema” should be aligned in these repositories</li>
  <li>for convenience, all the “repositories” are kept in one git repository, so that:
    <ul>
      <li>it’s easy to grep all the code at once and spot the places require changes after a schema change</li>
      <li>no need in manual update dependencies on “repository2” and “repository3”.</li>
    </ul>
  </li>
</ul>

<p>But this is not all. If picture just one Ruby process that calls only internal methods, <strong>dry-struct</strong> can be used as a <a href="https://martinfowler.com/bliki/ValueObject.html">value object</a>. And again, as the structs are strict, we can talk about a reliable internal API. With almost the same respect as typed languages have.</p>

<h4 id="2-whats-your-preference-for-validating-preparing-and-processing-parameters-coming-from-another-process">2. What’s your preference for validating, preparing, and processing parameters coming from another process?</h4>

<p><strong>dry-schema</strong> is my leading preference here. It’s like <strong>dry-struct</strong>, has the same base that’s <strong>dry-types</strong>, has the same philosophy, but has a bit prettier DSL and API for validating params. Also, it’s easier for beginners.</p>

<p>I’m not a fan keeping validations and callbacks on the model layer. Models can be used in different contexts that don’t need some of the callbacks or validations. So, it’s reasonable to define callbacks and validations inside these contexts instead of having spaghetti in one place. Although, it’s reasonable to leave some validations on the model layer if they are <strong>true in all contexts</strong>. If follow this rule, the code becomes easier to maintain and extend.</p>

<p>Check out this snippet to feel the idea:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">PostSchema</span> <span class="o">=</span> <span class="no">Dry</span><span class="o">::</span><span class="no">Schema</span><span class="o">.</span><span class="no">Params</span> <span class="k">do</span>
  <span class="n">required</span><span class="p">(</span><span class="ss">:title</span><span class="p">).</span><span class="nf">filled</span><span class="p">(</span><span class="ss">:string</span><span class="p">)</span>
  <span class="n">optional</span><span class="p">(</span><span class="ss">:body</span><span class="p">).</span><span class="nf">filled</span><span class="p">(</span><span class="ss">:string</span><span class="p">)</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">CreatePostOperation</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
    <span class="vi">@params</span> <span class="o">=</span> <span class="no">PostSchema</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">peform</span>
    <span class="k">raise</span> <span class="no">ParamsError</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">params</span><span class="p">.</span><span class="nf">errors</span><span class="p">.</span><span class="nf">to_h</span><span class="p">)</span> <span class="k">unless</span> <span class="n">params</span><span class="p">.</span><span class="nf">success?</span>
    <span class="no">Post</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">params</span><span class="p">.</span><span class="nf">to_h</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The <code class="highlighter-rouge">PostSchema</code> is a contract between the receiving process and another process sends the params. This contract specifies a set of rules such as:</p>
<ul>
  <li>required and optional fields</li>
  <li>types of these fields</li>
  <li>automatic coercing of the given parameters according to the specified types</li>
  <li>if a parameter has a wrong type, or a value that’s impossible to typecast to the specified type, it’s considered as a validation error.</li>
</ul>

<p>Note, besides the params validation we get also manageable typecasting for free. By manageable here I mean an official possibility to add custom coercing rules or types without monkey patches. Keep in mind, Rails doesn’t have this possibility.</p>

<p>The <code class="highlighter-rouge">CreatePostOperation</code> is supposed to be used in a controller responsible for handling requests from other processes. Its implementation is simplified a lot here just for the sake of providing the idea. In reality, an operation like that has more things to take care such as:</p>
<ul>
  <li>open DB transaction or not in <code class="highlighter-rouge">#perform</code></li>
  <li>exit softly without exceptions providing an interface to fetch the errors</li>
  <li>bypass errors from the model layer. Remember, the <code class="highlighter-rouge">Post</code> model above can still have validations or there are may be constraints on DB level.</li>
  <li>catch particular exceptions and extract errors from there to expose them through the interface similar to model validations</li>
  <li>other.</li>
</ul>

<h4 id="3-im-familiar-with-dry-struct-but-it-cannot-serialize-data-from-my-objects-how-do-you-serialize-into-dry-struct">3. I’m familiar with dry-struct but it cannot serialize data from my objects. How do you serialize into dry-struct?</h4>

<p>That’s true. <strong>dry-struct</strong> doesn’t have this functionality out of the box. But this is not a big deal as it’s easy to implement:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">BaseStruct</span> <span class="o">&lt;</span> <span class="no">Dry</span><span class="o">::</span><span class="no">Struct</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">to_hash</span><span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="n">type</span> <span class="o">=</span> <span class="nb">self</span><span class="p">)</span>
    <span class="n">type</span><span class="p">.</span><span class="nf">schema</span><span class="p">.</span><span class="nf">each_with_object</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">res</span><span class="o">|</span>
      <span class="nb">name</span> <span class="o">=</span> <span class="n">key</span><span class="p">.</span><span class="nf">name</span>
      <span class="kp">attr</span> <span class="o">=</span> <span class="n">key</span><span class="p">.</span><span class="nf">type</span>
      <span class="k">if</span> <span class="n">array?</span><span class="p">(</span><span class="kp">attr</span><span class="p">)</span>
        <span class="n">values</span> <span class="o">=</span> <span class="o">::</span><span class="no">Array</span><span class="p">.</span><span class="nf">wrap</span><span class="p">(</span><span class="n">object</span><span class="p">.</span><span class="nf">public_send</span><span class="p">(</span><span class="nb">name</span><span class="p">))</span>
        <span class="n">res</span><span class="p">[</span><span class="nb">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">values</span><span class="p">.</span><span class="nf">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">value_item</span><span class="o">|</span> <span class="n">serialize</span><span class="p">(</span><span class="n">value_item</span><span class="p">,</span> <span class="kp">attr</span><span class="p">.</span><span class="nf">member</span><span class="p">)</span> <span class="p">}</span>
      <span class="k">elsif</span> <span class="n">bool?</span><span class="p">(</span><span class="kp">attr</span><span class="p">)</span>
        <span class="n">value</span> <span class="o">=</span> <span class="n">object</span><span class="p">.</span><span class="nf">public_send</span><span class="p">(</span><span class="s2">"</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">?"</span><span class="p">)</span>
        <span class="n">res</span><span class="p">[</span><span class="nb">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
      <span class="k">else</span>
        <span class="n">value</span> <span class="o">=</span> <span class="n">object</span><span class="p">.</span><span class="nf">public_send</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
        <span class="n">res</span><span class="p">[</span><span class="nb">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">serialize</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="kp">attr</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="kp">private</span>

  <span class="k">def</span> <span class="nf">serialize</span><span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="n">type</span><span class="p">)</span>
    <span class="n">complex?</span><span class="p">(</span><span class="n">type</span><span class="p">)</span> <span class="p">?</span> <span class="n">to_hash</span><span class="p">(</span><span class="n">object</span><span class="p">,</span> <span class="n">type</span><span class="p">)</span> <span class="p">:</span> <span class="n">object</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">complex?</span><span class="p">(</span><span class="n">attribute</span><span class="p">)</span>
    <span class="n">attribute</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="ss">:&lt;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">attribute</span> <span class="o">&lt;</span> <span class="no">BaseStruct</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">bool?</span><span class="p">(</span><span class="n">attribute</span><span class="p">)</span>
    <span class="n">attribute</span><span class="p">.</span><span class="nf">primitive?</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">array?</span><span class="p">(</span><span class="n">attribute</span><span class="p">)</span>
    <span class="n">attribute</span><span class="p">.</span><span class="nf">primitive?</span><span class="p">([])</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Types</span>
  <span class="kp">include</span> <span class="no">Dry</span><span class="o">.</span><span class="no">Types</span><span class="p">()</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">PostStruct</span> <span class="o">&lt;</span> <span class="no">BaseStruct</span>
  <span class="n">attribute</span> <span class="ss">:title</span><span class="p">,</span> <span class="no">Types</span><span class="o">::</span><span class="no">String</span>
  <span class="n">attribute</span> <span class="ss">:body</span><span class="p">,</span> <span class="no">Types</span><span class="o">::</span><span class="no">String</span><span class="p">.</span><span class="nf">optional</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The main function here is <code class="highlighter-rouge">BaseStruct.to_hash</code> as you’ve probably guessed. It’s just a recursive function traverses all the defined attributes. Just start using it: <code class="highlighter-rouge">PostStruct.to_hash(Post.last).to_json</code>. Pay attention, the serializing object should have defined all methods that are specified on the struct. In this example, there are <code class="highlighter-rouge">title</code> and <code class="highlighter-rouge">body</code> attributes defined on the struct, so that the <code class="highlighter-rouge">Post</code> instance should respond to these both methods and return values with the specified types.</p>

<p>Note, a complex attribute should inherit from <code class="highlighter-rouge">BaseStruct</code> like that:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">attribute</span> <span class="ss">:metadata</span><span class="p">,</span> <span class="no">BaseStruct</span> <span class="k">do</span>
  <span class="n">attribute</span> <span class="ss">:writer_id</span><span class="p">,</span> <span class="no">Types</span><span class="o">::</span><span class="no">Integer</span>
  <span class="n">attribute</span> <span class="ss">:created_at</span><span class="p">,</span> <span class="no">Types</span><span class="o">::</span><span class="no">Time</span>
<span class="k">end</span>
</code></pre></div></div>

<p>To get the whole picture check out the example how to deserialize:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">PostStruct</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">params</span><span class="p">))</span>
</code></pre></div></div>

<p>Also, one more advice for people already tried <strong>dry-schema</strong> or <strong>dry-struct</strong>. At first glance, they may look scary because of types diversity. All types there don’t exist in global scope as in Ruby. For example, in Ruby there is <code class="highlighter-rouge">String</code> and that’s it, it’s <code class="highlighter-rouge">String</code> everywhere. In <strong>dry-struct</strong>/<strong>dry-schema</strong> types relate to groups: <code class="highlighter-rouge">nominal</code>, <code class="highlighter-rouge">strict</code>, <code class="highlighter-rouge">coercible</code>, <code class="highlighter-rouge">params</code>, <code class="highlighter-rouge">json</code>, <code class="highlighter-rouge">maybe</code>. More about this is <a href="https://dry-rb.org/gems/dry-types/1.2/built-in-types/">here</a>. The difference between them is how much they are strict and if automatic typecast is possible.</p>

<p>For JSON serialization and deserialization we need strict and coercible types. But not all default <strong>dry-struct</strong> types satisfy these requirements. For instance, there is no strict and coercible <code class="highlighter-rouge">Date</code> out of the box. Fortunately, we can combine them: <code class="highlighter-rouge">Date = Strict::Date | JSON::Date</code>. And if put this code under the <code class="highlighter-rouge">Types</code> class above we can come up with the following elegant code:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Types</span>
  <span class="kp">include</span> <span class="no">Dry</span><span class="o">.</span><span class="no">Types</span><span class="p">()</span>

  <span class="no">Date</span> <span class="o">=</span> <span class="no">Strict</span><span class="o">::</span><span class="no">Date</span> <span class="o">|</span> <span class="no">JSON</span><span class="o">::</span><span class="no">Date</span>
  <span class="no">Symbol</span> <span class="o">=</span> <span class="no">Strict</span><span class="o">::</span><span class="no">Symbol</span> <span class="o">|</span> <span class="no">JSON</span><span class="o">::</span><span class="no">Symbol</span>
  <span class="no">Time</span> <span class="o">=</span> <span class="no">Strict</span><span class="o">::</span><span class="no">Time</span> <span class="o">|</span> <span class="no">JSON</span><span class="o">::</span><span class="no">Time</span>
  <span class="no">Decimal</span> <span class="o">=</span> <span class="no">Coercible</span><span class="o">::</span><span class="no">Decimal</span>
<span class="k">end</span>
</code></pre></div></div>

<p>And now all types under the <code class="highlighter-rouge">Types::</code> space are strict and coercible. We shouldn’t worry about from which group to take a type while specifying attribute.</p>

<h4 id="4-ruby-debugging-is-a-pain-can-you-recommend-something-to-reduce-the-time-spending-on-that">4. Ruby debugging is a pain. Can you recommend something to reduce the time spending on that?</h4>

<p>Of course, I can. Use <strong>dry-struct</strong>! Seriously, strictly defined structures in the code make it much more readable that reduces debugging time drastically. Which type is used and where becomes clear almost immediately after the first look at the code. If the signature of the methods receiving these structures is documented, we get almost statically typed language out of the box. So we benefit from both worlds: dynamic and static.</p>

<p>Example of methods signature documentation in YARD format:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># @param post_params [PostStruct]</span>
<span class="k">def</span> <span class="nf">publish</span><span class="p">(</span><span class="n">post_params</span><span class="p">)</span>
</code></pre></div></div>

<p>By the way, documenting just methods signatures is good. But documenting methods themselves from a business point of view also brings a lot of benefits. If you still don’t document your code, I invite to start doing that. You will see how you are becoming a better developer.</p>

<h3 id="conclusion">Conclusion</h3>

<p><a href="https://dry-rb.org/">Dry-rb</a> ecosystem is huge. In this post, we’ve touched only parts of it: <code class="highlighter-rouge">dry-struct</code>, <code class="highlighter-rouge">dry-schema</code>, and implicitly <code class="highlighter-rouge">dry-types</code>. I hope you’ve seen benefits these tools bring to Ruby world. In short, they borrow a missing part from static programming languages - types. That makes programming in Ruby much more comfortable and confident. As a result, it reduces pain in terms of bugs and debugging time.</p>
:ET