I"Å'<p>There is a list of reserved words for Ruby On Rails framework. Full list is <a href="http://oldwiki.rubyonrails.org/rails/pages/ReservedWords">here</a>.
But it doesnâ€™t contain at least one word which I will describe in this post. There are many reasons to donâ€™t give name <strong>Test</strong> for your <em>models</em> in <em>Ruby On Rails</em>.
I will try to describe in this post problems which you will have if you have <em>model</em> with <strong>Test</strong> name.</p>

<p><img src="/images/do_not_give_test_name_for_models.jpg" alt="Do not give name Test for your models" /></p>

<p>Letâ€™s start with creating new application:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~$ rails new test_app --skip-test-unit --old-style-hash --skip-javascript --skip-bundle --skip-git
~$ cd test_app
~/test_app$ bundle install
</code></pre></div></div>

<p>Make <em>models</em> <strong>Test</strong> and <strong>TestPart</strong>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>test_app$ rails g model test name:string
test_app$ rails g model test_part name:string test_id:integer
test_app$ rake db:migrate
</code></pre></div></div>

<h2 id="reason-1-test-is-not-a-class-it-is-a-module">Reason 1: Test is not a class. It is a module!</h2>

<p>I want to debug my code. So Iâ€™m going to <em>rails console</em> by typing <strong>rails c</strong> in terminal and trying to
find all <strong>Test</strong> instances in my <em>database</em> (I didâ€™t create one that way I have to get blank <em>collection</em>):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>irb(main):001:0&gt; Test.all
NoMethodError: undefined method `all' for Test:Module
</code></pre></div></div>

<p>What is happened? Iâ€™m trying to get all <em>tests</em> in my <em>db</em> but I get error instead of empty <em>collection</em>.
We will find out for this question in <em>rails console</em>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>irb(main):002:0&gt; Test.class
=&gt; Module
</code></pre></div></div>

<p>This is a <em>module</em> but not a <em>class</em> how we expected. <em>Module</em> <strong>Test</strong> exist in <strong>TestUnit</strong> and even we arenâ€™t using
<strong>TestUnit</strong> in our application we will have this confusion. To avoid this negative situation we can rename <em>class</em> <strong>Test</strong> to
<strong>MyTest</strong> for example. Letâ€™s do it manually:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>test_app$ mv app/models/test.rb app/models/my_test.rb
</code></pre></div></div>

<p>Remember if we have <em>model</em> <strong>MyTest</strong> it would connect with <em>table</em>
<strong>my_tests</strong> but we donâ€™t have this <em>table</em>. So we have 2 ways to solve this problem:</p>

<ol>
  <li>Rename <em>table</em> <strong>tests</strong> to <strong>my_tests</strong>. We should create new migration to do it</li>
  <li>Set custom <em>table name</em> for <em>model</em> <strong>MyTest</strong>. In our case it is <strong>tests</strong></li>
</ol>

<p>I will use 2nd variant because it will take less time:</p>

<blockquote>
  <p>app/models/my_test.rb</p>
</blockquote>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">MyTest</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="nb">self</span><span class="p">.</span><span class="nf">table_name</span> <span class="o">=</span> <span class="s1">'tests'</span>
<span class="k">end</span></code></pre></figure>

<blockquote>
  <p>You must use here <strong>self.table_name</strong> but not <strong>table_name =</strong>. It wonâ€™t give expected effect in another case.</p>
</blockquote>

<p>Try to test what we did and how it works now:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>irb(main):003:0&gt; reload! # we have changes in code so we have to reload console to get changes here
irb(main):004:0&gt; MyTest.all
  MyTest Load (0.1ms)  SELECT "tests".* FROM "tests"
=&gt; []
</code></pre></div></div>

<p>And, yes! Itâ€™s working now correctly!</p>

<h2 id="reason-2-validates-uniqueness-in-scope">Reason 2: validates uniqueness in scope</h2>

<p>Assume <strong>MyTest</strong> has_many <strong>TestPart</strong>s and <strong>TestPart</strong> belongs to <strong>MyTest</strong>:</p>

<blockquote>
  <p>app/motest/test_part.rb</p>
</blockquote>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">TestPart</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">attr_accessible</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:test_id</span>
  <span class="n">belongs_to</span> <span class="ss">:test</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">'MyTest'</span>
<span class="k">end</span></code></pre></figure>

<blockquote>
  <p>app/models/my_test.rb</p>
</blockquote>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">MyTest</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">attr_accessible</span> <span class="ss">:name</span>
  <span class="nb">self</span><span class="p">.</span><span class="nf">table_name</span> <span class="o">=</span> <span class="s1">'tests'</span>
  <span class="n">has_many</span> <span class="ss">:test_parts</span><span class="p">,</span> <span class="ss">:foreign_key</span> <span class="o">=&gt;</span> <span class="s1">'test_id'</span>
<span class="k">end</span></code></pre></figure>

<p>Check it out:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>irb(main):009:0&gt; reload!
irb(main):010:0&gt; t = MyTest.new(:name =&gt; 'My first test')
=&gt; #&lt;MyTest id: nil, name: "My first test", created_at: nil, updated_at: nil&gt;
irb(main):011:0&gt; t.test_parts.build(:name =&gt; 'Test part 1')
=&gt; #&lt;TestPart id: nil, name: "Test part 1", test_id: nil, created_at: nil, updated_at: nil&gt;
irb(main):012:0&gt; t.test_parts.build(:name =&gt; 'Test part 2')
=&gt; #&lt;TestPart id: nil, name: "Test part 2", test_id: nil, created_at: nil, updated_at: nil&gt;
irb(main):013:0&gt; t.save
=&gt; true
irb(main):014:0&gt; t.test_parts
=&gt; [#&lt;TestPart id: 1, name: "Test part 1", test_id: 1, created_at: "2012-03-02 22:49:51", updated_at: "2012-03-02 22:49:51"&gt;, #&lt;TestPart id: 2, name: "Test part 2", test_id: 1, created_at: "2012-03-02 22:49:51", updated_at: "2012-03-02 22:49:51"&gt;]
</code></pre></div></div>

<p>Perfect! Everything is working.</p>

<p>Letâ€™s try to add validation for test parts nameâ€™s uniqueness in scope <strong>test_id</strong>:</p>

<blockquote>
  <p>app/motest/test_part.rb</p>
</blockquote>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">TestPart</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">attr_accessible</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:test_id</span>
  <span class="n">belongs_to</span> <span class="ss">:test</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">'MyTest'</span>
  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:uniqueness</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:scope</span> <span class="o">=&gt;</span> <span class="ss">:test_id</span><span class="p">}</span>
<span class="k">end</span></code></pre></figure>

<p>Try to save the same test partials to my test:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>irb(main):016:0&gt; reload!
irb(main):017:0&gt; t = MyTest.create(:name =&gt; 'My second test')
=&gt; #&lt;MyTest id: 2, name: "My second test", created_at: "2012-03-02 23:06:30", updated_at: "2012-03-02 23:06:30"&gt;
irb(main):018:0&gt; t.test_parts.build(:name =&gt; 'Test part')
=&gt; #&lt;TestPart id: nil, name: "Test part", test_id: 2, created_at: nil, updated_at: nil&gt;
irb(main):019:0&gt; t.test_parts.build(:name =&gt; 'Test part')
=&gt; #&lt;TestPart id: nil, name: "Test part", test_id: 2, created_at: nil, updated_at: nil&gt;
irb(main):020:0&gt; t.save
=&gt; true
irb(main):021:0&gt; t.test_parts
=&gt; [#&lt;TestPart id: 3, name: "Test part", test_id: 2, created_at: "2012-03-02 23:06:56", updated_at: "2012-03-02 23:06:56"&gt;, #&lt;TestPart id: nil, name: "Test part", test_id: 2, created_at: nil, updated_at: nil&gt;]
</code></pre></div></div>

<p>Ooops! We have trouble here. We added <em>uniqueness validation</em> for <em>name</em> field <em>test parts</em> and we should able to save <strong>only one</strong> test part with
same name for <em>my test</em>. Butâ€¦ we did it!</p>

<p>To fix this problem we have 2 ways:</p>

<ol>
  <li>Rename table <strong>tests</strong> to <strong>my_tests</strong> and remove line <code class="highlighter-rouge">self.table_name = 'tests'</code> from <code class="highlighter-rouge">app/models/my_test.rb</code></li>
  <li>Rename colum <strong>test_id</strong> to <strong>my_test_id</strong> and fix code according this changing: use everywhere <strong>test_id</strong> instead of <strong>my_test_id</strong> in application</li>
</ol>

<p>I think it is very important to find this bugs in your application before you started write it and use in production. So I hope these rails confusions
described in my post will help you to avoid problems with coding in the future.</p>

<p>Thatâ€™s it what I wanted to tell you today. See you in next posts!</p>
:ET