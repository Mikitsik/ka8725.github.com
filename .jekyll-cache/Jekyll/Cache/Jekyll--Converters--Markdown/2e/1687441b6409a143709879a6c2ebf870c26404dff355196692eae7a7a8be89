I")-<p>When you see configuration examples in gems README like this:</p>

<blockquote>
  <p>This real example you can find in the README of awesome gem <a href="https://github.com/rumblelabs/asset_sync">assets_sync</a>.</p>
</blockquote>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">AssetSync</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">fog_provider</span> <span class="o">=</span> <span class="s1">'AWS'</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">fog_directory</span> <span class="o">=</span> <span class="no">ENV</span><span class="p">[</span><span class="s1">'FOG_DIRECTORY'</span><span class="p">]</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">aws_access_key_id</span> <span class="o">=</span> <span class="no">ENV</span><span class="p">[</span><span class="s1">'AWS_ACCESS_KEY_ID'</span><span class="p">]</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">aws_secret_access_key</span> <span class="o">=</span> <span class="no">ENV</span><span class="p">[</span><span class="s1">'AWS_SECRET_ACCESS_KEY'</span><span class="p">]</span>

  <span class="c1"># Don't delete files from the store</span>
  <span class="c1"># config.existing_remote_files = "keep"</span>
  <span class="c1">#</span>
  <span class="c1"># Increase upload performance by configuring your region</span>
  <span class="c1"># config.fog_region = 'eu-west-1'</span>
  <span class="c1">#</span>
  <span class="c1"># Automatically replace files with their equivalent gzip compressed version</span>
  <span class="c1"># config.gzip_compression = true</span>
  <span class="c1">#</span>
  <span class="c1"># Use the Rails generated 'manifest.yml' file to produce the list of files to</span>
  <span class="c1"># upload instead of searching the assets directory.</span>
  <span class="c1"># config.manifest = true</span>
  <span class="c1">#</span>
  <span class="c1"># Fail silently.  Useful for environments such as Heroku</span>
  <span class="c1"># config.fail_silently = true</span>
<span class="k">end</span></code></pre></figure>

<p>what are they do you think?
Where should you define <code class="highlighter-rouge">ENV['FOG_DIRECTORY']</code>? Should you define it in the shell script (like <code class="highlighter-rouge">~/.bashrc</code>, <code class="highlighter-rouge">~/.bash_profile</code>, <code class="highlighter-rouge">~/.profile</code> and etc.) or may be in the <code class="highlighter-rouge">/etc/environment</code>? If you think so I have to disappoint you - you are wrong!</p>

<h2 id="challenge">Challenge</h2>

<p>Let’s define <code class="highlighter-rouge">FOG_DIRECTORY</code> variable in the <code class="highlighter-rouge">~/.bashrc</code> file:</p>

<blockquote>
  <p>Pay attention if <code class="highlighter-rouge">~/.bashrc</code> includes line <code class="highlighter-rouge">[ -z "$PS1" ] &amp;&amp; return</code> or equal you have to define variables above it</p>
</blockquote>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">export </span><span class="nv">FOG_DIRECTORY</span><span class="o">=</span>my-bucket-name</code></pre></figure>

<p>Then reboot shell and start Rails application. You will see that application is configured correctly. You enjoy it and going to deploy application to the production on the VPS or VDS the same way and everything will be work there… before first reboot. Why <code class="highlighter-rouge">ENV['FOG_DIRECTORY']</code> is <code class="highlighter-rouge">nil</code> after server reboot? The answer is simple - <a href="http://nginx.org/">nginx</a> or another web server (I don’t know which one you use, but I prefer using <strong>nginx</strong>) starts before evaluating <code class="highlighter-rouge">~/.bashrc</code> and even <code class="highlighter-rouge">/etc/environment</code>.</p>

<p>If you use <a href="https://github.com/rumblelabs/asset_sync">assets_sync</a> to upload your assets to the <strong>cloud</strong> you can have this error during deployment with capistrano](https://github.com/capistrano/capistrano):</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">AssetSync</span><span class="p">:</span> <span class="n">using</span> <span class="n">default</span> <span class="n">configuration</span> <span class="n">from</span> <span class="n">built</span><span class="o">-</span><span class="k">in</span> <span class="n">initializer</span>
<span class="n">rake</span> <span class="n">aborted!</span>
<span class="no">Fog</span> <span class="n">provider</span> <span class="n">can</span><span class="s1">'t be blank, Fog directory can'</span><span class="n">t</span> <span class="n">be</span> <span class="n">blank</span>

<span class="no">Tasks</span><span class="p">:</span> <span class="no">TOP</span> <span class="o">=&gt;</span> <span class="n">assets</span><span class="ss">:precompile:nondigest</span>
<span class="p">(</span><span class="no">See</span> <span class="n">full</span> <span class="n">trace</span> <span class="n">by</span> <span class="n">running</span> <span class="n">task</span> <span class="n">with</span> <span class="o">--</span><span class="n">trace</span><span class="p">)</span></code></pre></figure>

<p>So we have to looking for another way how to define these variables.</p>

<h2 id="solution">Solution</h2>

<p>Considering the problem above there is a reasonable question - what are these variables in config at all and what to do? How should we define these variables?</p>

<p>During surfing the Internet I’ve found a good <a href="http://railsapps.github.com/rails-environment-variables.html">article</a> which explains cases how to achieve our goals.</p>

<p>I will describe here the case which I prefer because I think it is the simplest and faster than others.</p>

<p>Insert these lines of code to the <strong>config/application.rb</strong> after line <code class="highlighter-rouge">config.assets.version = '1.0'</code>:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">config</span><span class="p">.</span><span class="nf">before_configuration</span> <span class="k">do</span>
  <span class="n">env_file</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="no">Rails</span><span class="p">.</span><span class="nf">root</span><span class="p">,</span> <span class="s1">'config'</span><span class="p">,</span> <span class="s1">'local_env.yml'</span><span class="p">)</span>
  <span class="no">YAML</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="no">File</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">env_file</span><span class="p">)).</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
    <span class="no">ENV</span><span class="p">[</span><span class="n">key</span><span class="p">.</span><span class="nf">to_s</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
  <span class="k">end</span> <span class="k">if</span> <span class="no">File</span><span class="p">.</span><span class="nf">exists?</span><span class="p">(</span><span class="n">env_file</span><span class="p">)</span>
<span class="k">end</span></code></pre></figure>

<p>Now you have to create <strong>yml</strong> file in <strong>config</strong> folder and add it to <strong>.gitignore</strong> if you have to define these variables locally. Example of <code class="highlighter-rouge">config/local_env.yml</code>:</p>

<blockquote>
  <p>Key values are not real, so it doesn’t make sense to paste them in your configuration files</p>
</blockquote>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">FOG_PROVIDER</span><span class="p">:</span> <span class="no">AWS</span>
<span class="no">FOG_DIRECTORY</span><span class="p">:</span> <span class="n">my</span><span class="o">-</span><span class="n">bycket</span><span class="o">-</span><span class="nb">name</span>
<span class="no">AWS_ACCESS_KEY_ID</span><span class="p">:</span> <span class="no">ASFAWFSFDGSDEQWEFGD</span>
<span class="no">AWS_SECRET_ACCESS_KEY</span><span class="p">:</span> <span class="no">Afsdgd35gSFsdgSDF46GDSG4ghdf356</span>
<span class="no">FOG_REGION</span><span class="p">:</span> <span class="n">eu</span><span class="o">-</span><span class="n">west</span><span class="o">-</span><span class="mi">1</span></code></pre></figure>

<p>And finally if we deploy application with <strong>Capistrano</strong> we have to deploy it properly. We should put <strong>local_env.yml</strong> to the <strong>Capistrano</strong> shared folder on the server and change <strong>config/deploy.rb</strong> like this:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">before</span> <span class="s1">'deploy:assets:precompile'</span><span class="p">,</span> <span class="ss">:symlink_config_files</span>

<span class="n">desc</span> <span class="s2">"Link shared files"</span>
<span class="n">task</span> <span class="ss">:symlink_config_files</span> <span class="k">do</span>
  <span class="n">symlinks</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s2">"</span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/config/database.yml"</span> <span class="o">=&gt;</span> <span class="s2">"</span><span class="si">#{</span><span class="n">release_path</span><span class="si">}</span><span class="s2">/config/database.yml"</span><span class="p">,</span>
    <span class="s2">"</span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/config/local_env.yml"</span> <span class="o">=&gt;</span> <span class="s2">"</span><span class="si">#{</span><span class="n">release_path</span><span class="si">}</span><span class="s2">/config/local_env.yml"</span>
  <span class="p">}</span>
  <span class="n">run</span> <span class="n">symlinks</span><span class="p">.</span><span class="nf">map</span><span class="p">{</span><span class="o">|</span><span class="n">from</span><span class="p">,</span> <span class="n">to</span><span class="o">|</span> <span class="s2">"ln -nfs </span><span class="si">#{</span><span class="n">from</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">to</span><span class="si">}</span><span class="s2">"</span><span class="p">}.</span><span class="nf">join</span><span class="p">(</span><span class="s2">" &amp;&amp; "</span><span class="p">)</span>
<span class="k">end</span></code></pre></figure>

<p>Here it is assumed that <strong>local_env.yml</strong> is existed in the <strong>{shared_path}/config/</strong> folder on the server. Check out here that I’ve done the same things with my <strong>database.yml</strong> config (by the way ignore the <strong>database.yml</strong> in your <a href="http://en.wikipedia.org/wiki/Concurrent_Versions_System">CVS</a> it’s the best practice too).</p>
:ET