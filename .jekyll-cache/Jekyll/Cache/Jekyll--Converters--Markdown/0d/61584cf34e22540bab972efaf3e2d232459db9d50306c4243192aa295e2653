I"!<p><strong>TL;DR:</strong> Provide <code class="highlighter-rouge">to_table</code> option like that <code class="highlighter-rouge">foreign_key: {to_table: :&lt;table_name&gt;}</code>.</p>

<p>When it comes to a Rails migration for a <code class="highlighter-rouge">belongs_to</code> association which name doesn’t correspond to the joined table name, it may hard to find out how to do that quickly after reading the Rails documentation or sources. This post should help with that.</p>

<p>Let’s start with the following example:</p>
<ul>
  <li>there is a <code class="highlighter-rouge">User</code> model in the system already</li>
  <li>we need to add <code class="highlighter-rouge">Payment</code> model</li>
  <li><code class="highlighter-rouge">Payment</code> should belong to a <code class="highlighter-rouge">receiver</code>, that’s <code class="highlighter-rouge">User</code>.</li>
</ul>

<p>In the code it would look like that:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Payment</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">belongs_to</span> <span class="ss">:receiver</span><span class="p">,</span> <span class="ss">class_name: </span><span class="s1">'User'</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Let’s try to generate a this model and a migration that creates the DB table for it as per the <a href="https://edgeguides.rubyonrails.org/active_record_migrations.html#model-generators">documentation</a>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rails g model payment receiver:references
</code></pre></div></div>

<p>That produces the following migration:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">CreatePayments</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span><span class="p">[</span><span class="mf">6.0</span><span class="p">]</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="n">create_table</span> <span class="ss">:payments</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">belongs_to</span> <span class="ss">:receiver</span><span class="p">,</span> <span class="ss">null: </span><span class="kp">false</span><span class="p">,</span> <span class="ss">foreign_key: </span><span class="kp">true</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">timestamps</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Surprisingly, <code class="highlighter-rouge">rake db:migrate</code> produces the following error:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PG::UndefinedTable: ERROR:  relation "receivers" does not exist
</code></pre></div></div>

<p>And the reason is clear. The migration tries to add a foreign key for a not existing table. It takes the association name <code class="highlighter-rouge">receiver</code> and supposes, as default, that it points to a table that’s plural <code class="highlighter-rouge">receivers</code>. And there is nothing wrong with that. Except the fact, there is no <code class="highlighter-rouge">receivers</code> table and <code class="highlighter-rouge">users</code> table should be used instead.</p>

<p>Unfortunately, after significant time spent on docs reading one may even end up with no solution. It’s hard to spot one line in the examples somewhere in the deep of Rails code. Hence, I provide a solution here:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">CreatePayments</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span><span class="p">[</span><span class="mf">6.0</span><span class="p">]</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="n">create_table</span> <span class="ss">:payments</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">belongs_to</span> <span class="ss">:receiver</span><span class="p">,</span> <span class="ss">null: </span><span class="kp">false</span><span class="p">,</span> <span class="ss">foreign_key: </span><span class="p">{</span><span class="ss">to_table: :users</span><span class="p">}</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">timestamps</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>And now the migration runs without any failures and produces a correct result that’s the created <code class="highlighter-rouge">payments</code> table with the <code class="highlighter-rouge">receiver_id</code> column and a foreign key points to the joined <code class="highlighter-rouge">users</code> table.</p>

<p>So, the solution is to use <code class="highlighter-rouge">foreign_key: {to_table: :users}</code> for that example above.</p>

<p>I kindly ask you to participate in the docs improvement. Just vote for this <a href="https://github.com/rails/rails/pull/38469">PR</a>. Thank you!</p>

<p>UPDATE 02/20/2020: The PR got merged, what means the documentation got improved!</p>
:ET