I"‡0<p>At some point, you can start to think about how it would be great to have in your pure Ruby objects
of your Rails application the same DSL as Railsâ€™ controllers have to rescue exceptions coming from
actions with the <code class="highlighter-rouge">rescue_from</code> help. If you are interested in this topic then keep reading and I will
show how itâ€™s easy to implement it from scratch.</p>

<p><strong>TL;DR:</strong> use <a href="http://api.rubyonrails.org/v5.0/classes/ActiveSupport/Rescuable/ClassMethods.html">ActiveSupport::Rescuable</a>.</p>

<h2 id="introduction">Introduction</h2>

<p>Itâ€™s not a secret to everyone that itâ€™s too easy to catch all targeted exceptions raised in any Rails controller. Just use <code class="highlighter-rouge">rescue_from</code> in a base controller like this:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">rescue_from</span> <span class="no">CanCan</span><span class="o">::</span><span class="no">AccessDenied</span> <span class="k">do</span>
    <span class="n">redirect_to</span> <span class="n">root_path</span><span class="p">,</span> <span class="ss">alert: </span><span class="s2">"You don't have access to this page."</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>And thatâ€™s it. Whenever the <code class="highlighter-rouge">CanCan::AccessDenied</code> is raised in some action of inherited controllers from the <code class="highlighter-rouge">ApplicationController</code> the Ruby interpreter jumps into this block, defined with the <code class="highlighter-rouge">rescue_from</code> and then itâ€™s executed. As a result, a user will be redirected to the main page with an alert and the original exception is suppressed. There are different ways how to use the <code class="highlighter-rouge">rescue_from</code> method, but this post is not about this, so you can find all variations <a href="http://api.rubyonrails.org/v5.0/classes/ActiveSupport/Rescuable/ClassMethods.html#method-i-rescue_from">here</a>.</p>

<p>The main idea of this article is to show you how to add such functionality into some other type of objects of your Rails application. Say, you have a bunch of service objects that reside at the same hierarchy branch.
And you want to catch some general exception in the base class of these service objects easily and, you think,
that it would be good to have this functionality in the descendants.</p>

<h2 id="extend-custom-objects-with-rescuable">Extend custom objects with Rescuable</h2>

<p>Actually, itâ€™s not a problem at all. All you have to do is just to include the <code class="highlighter-rouge">ActiveSupport::Rescuable</code>
module into a base class and wrap the method responsible for the execution of some work that could raise an exception which you would like to catch later with the <code class="highlighter-rouge">rescue_from</code>.</p>

<p>To not be wordy I will just provide the following code snippet which demonstrates the main idea:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">BaseService</span>
  <span class="kp">include</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Rescuable</span>

  <span class="k">class</span> <span class="nc">FieldIsNilError</span> <span class="o">&lt;</span> <span class="no">StandardError</span><span class="p">;</span> <span class="k">end</span>

  <span class="n">rescue_from</span> <span class="no">FieldIsNilError</span> <span class="k">do</span> <span class="o">|</span><span class="n">exception</span><span class="o">|</span>
    <span class="nb">puts</span> <span class="s2">"Field is empty: </span><span class="si">#{</span><span class="n">exception</span><span class="p">.</span><span class="nf">class</span><span class="si">}</span><span class="s2"> - </span><span class="si">#{</span><span class="n">exception</span><span class="p">.</span><span class="nf">message</span><span class="si">}</span><span class="s2">"</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">call</span>
    <span class="n">call_with_rescue</span> <span class="p">{</span> <span class="n">useful_yield</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="kp">private</span>

  <span class="k">def</span> <span class="nf">call_with_rescue</span>
    <span class="k">yield</span>
  <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
    <span class="n">rescue_with_handler</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="o">||</span> <span class="k">raise</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">useful_yield</span>
    <span class="nb">fail</span> <span class="no">NotImplementedError</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">LoginUserService</span> <span class="o">&lt;</span> <span class="no">BaseService</span>
  <span class="k">class</span> <span class="nc">InvalidEmailError</span> <span class="o">&lt;</span> <span class="no">StandardError</span><span class="p">;</span> <span class="k">end</span>
  <span class="k">class</span> <span class="nc">EmptyEmailError</span> <span class="o">&lt;</span> <span class="no">StandardError</span><span class="p">;</span> <span class="k">end</span>
  <span class="k">class</span> <span class="nc">SecurityError</span> <span class="o">&lt;</span> <span class="no">StandardError</span><span class="p">;</span> <span class="k">end</span>

  <span class="n">rescue_from</span> <span class="no">InvalidEmailError</span><span class="p">,</span> <span class="no">EmptyEmailError</span> <span class="k">do</span> <span class="o">|</span><span class="n">exception</span><span class="o">|</span>
    <span class="nb">puts</span> <span class="s2">"Logged invalid login attempt: </span><span class="si">#{</span><span class="n">exception</span><span class="p">.</span><span class="nf">class</span><span class="si">}</span><span class="s2"> - </span><span class="si">#{</span><span class="n">exception</span><span class="p">.</span><span class="nf">message</span><span class="si">}</span><span class="s2">"</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="ss">email: </span><span class="kp">nil</span><span class="p">)</span>
    <span class="vi">@email</span> <span class="o">=</span> <span class="n">email</span>
  <span class="k">end</span>

  <span class="kp">private</span>

  <span class="k">def</span> <span class="nf">useful_yield</span>
    <span class="k">case</span> <span class="vi">@email</span>
    <span class="k">when</span> <span class="s1">'invalid'</span>
      <span class="nb">fail</span> <span class="no">InvalidEmailError</span><span class="p">,</span> <span class="s1">'email is invalid'</span>
    <span class="k">when</span> <span class="s1">''</span>
      <span class="nb">fail</span> <span class="no">EmptyEmailError</span><span class="p">,</span> <span class="s1">'email is empty'</span>
    <span class="k">when</span> <span class="s1">'kill -9'</span>
      <span class="nb">fail</span> <span class="no">SecurityError</span><span class="p">,</span> <span class="s1">'throw out'</span>
    <span class="k">when</span> <span class="kp">nil</span>
      <span class="nb">fail</span> <span class="no">FieldIsNilError</span><span class="p">,</span> <span class="s1">'email is nil'</span>
    <span class="k">else</span>
      <span class="nb">puts</span> <span class="s1">'login ok'</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">LoginUserService</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">email: </span><span class="s1">'invalid'</span><span class="p">).</span><span class="nf">call</span>
<span class="c1"># =&gt; Logged invalid login attempt: LoginUserService::InvalidEmailError - email is invalid</span>
<span class="no">LoginUserService</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">email: </span><span class="s1">''</span><span class="p">).</span><span class="nf">call</span>
<span class="c1"># =&gt; Logged invalid login attempt: LoginUserService::EmptyEmailError - email is empty</span>
<span class="no">LoginUserService</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">email: </span><span class="s1">'ok@email.com'</span><span class="p">).</span><span class="nf">call</span>
<span class="c1"># =&gt; login ok</span>
<span class="no">LoginUserService</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">email: </span><span class="kp">nil</span><span class="p">).</span><span class="nf">call</span>
<span class="c1"># =&gt; Field is empty: BaseService::FieldIsNilError - email is nil</span>
<span class="no">LoginUserService</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">email: </span><span class="s1">'kill -9'</span><span class="p">).</span><span class="nf">call</span>
<span class="c1"># =&gt; throw out (LoginUserService::SecurityError)</span>
</code></pre></div></div>

<p>The main trick here is in the <code class="highlighter-rouge">include ActiveSupport::Rescuable</code>. It provides us with the <code class="highlighter-rouge">rescue_from</code>
method, defined on the class level. And also it adds the <code class="highlighter-rouge">rescue_with_handler</code> method which tries to find a handler for a raised exception and call this handler if itâ€™s found. The handler is defined with the <code class="highlighter-rouge">rescue_from</code> in a service object - itâ€™s just a block. We use this in the <code class="highlighter-rouge">call_with_rescue</code> method, which wraps that method that does a real job and can raise an exception at some point (this is the <code class="highlighter-rouge">useful_yield</code> method).
And this exception can be caught with the <code class="highlighter-rouge">rescue_from</code> and some useful work can be done suppressing the error. Or it will be raised up and an end user will observe it in case if we donâ€™t have a defined rescue handler for
this exception.</p>

<p>Now letâ€™s experiment with this code. Just place the code above in a <code class="highlighter-rouge">test.rb</code> file located in a Rails application and execute it with the <a href="http://guides.rubyonrails.org/command_line.html#rails-runner">rails runner</a> using following command: <code class="highlighter-rouge">rails runner test.rb</code>. You will have an output similar to this one:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Logged invalid login attempt: LoginUserService::InvalidEmailError - email is invalid
Logged invalid login attempt: LoginUserService::EmptyEmailError - email is empty
login ok
Field is empty: BaseService::FieldIsNilError - email is nil
test.rb:49:in `useful_yield': throw out (LoginUserService::SecurityError)
</code></pre></div></div>

<p>If you feel uncomfortable at this point you can change this code and rerun it with the rails runner, itâ€™s rather easy, as you see. Or just comment on this post. I would be glad to hear your response and questions.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Try to understand how interesting things are implemented, that you would like to have in your code, and consume
the implementation. But note, that sometimes itâ€™s easier to implement some things yourself
from scratch, there are may be many reasons for this: code quality, lack of functionality that canâ€™t be
extended easily and so on. Every case should be analyzed and a correct decision should be taken. But itâ€™s not
about this case. The <code class="highlighter-rouge">ActiveSupport::Rescuable</code> does its work and does it gracefully.</p>
:ET