I"ê'<p>Sometimes I have failed Angular code with the following exception message: <strong>Error: 10 $digest() iterations reached. Aborting!</strong> and I had no idea what is going on there while didn‚Äôt get an explanation how Angular‚Äôs bindings work. In this article I will share an idea how to avoid the problem and how to get better performance in Angular applications with memoization technique.</p>

<h2 id="the-digest-problem">The $digest problem</h2>

<p>So, when you get the error message <strong>Error: 10 $digest() iterations reached. Aborting!</strong> in your Angular application what it actually means? Well, to answer on the question we have to understand how Angular detects changes to show them on UI immediately.</p>

<p>The algorithm is very simple - when you output a variable or function in html templates via bindings, a watcher is created. During life cycle of the application, the watchers‚Äôs expressions are called many times and their results matched with the previous values, and, if values differ, an event is fired about this and the new values shown in the templates. To get more information about detecting the changes you can refer this <a href="https://www.ng-book.com/p/The-Digest-Loop-and-apply/">article</a>. But for now it‚Äôs enough to understand that the possible issue is a function which returns an array of objects and the function is called in the digest cycle.</p>

<p>It‚Äôs very simple to demonstrate it. Assume that we want to iterate through users list which is generated in a controller‚Äôs function:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="dl">'</span><span class="s1">plunker</span><span class="dl">'</span><span class="p">,</span> <span class="p">[]);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="dl">'</span><span class="s1">MainCtrl</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="na">firstName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">John</span><span class="dl">'</span><span class="p">,</span> <span class="na">lastName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Smith</span><span class="dl">'</span><span class="p">},</span>
    <span class="p">{</span><span class="na">firstName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Andrey</span><span class="dl">'</span><span class="p">,</span> <span class="na">lastName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Koleshko</span><span class="dl">'</span><span class="p">}</span>
  <span class="p">];</span>

  <span class="nx">$scope</span><span class="p">.</span><span class="nx">getUsers</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="nx">angular</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="na">fullName</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="dl">'</span><span class="s1"> </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">user</span><span class="p">.</span><span class="nx">lastName</span><span class="p">});</span>
    <span class="p">});</span>
    <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">});</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">ng-repeat=</span><span class="s">"user in getUsers()"</span><span class="nt">&gt;</span>
  
<span class="nt">&lt;/div&gt;</span></code></pre></figure>

<p><a href="http://plnkr.co/edit/ZuGB6ecpAQaHW2GFZLzC?p=preview">Demo</a></p>

<p>The issue happens because the <code class="highlighter-rouge">getUsers()</code> returns different result every call despite of the fact that properties of the array items are the same:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">res1</span> <span class="o">=</span> <span class="p">[{</span><span class="na">fullName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">John Smith</span><span class="dl">'</span><span class="p">},</span> <span class="p">{</span><span class="na">fullName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Andrey Koleshko</span><span class="dl">'</span><span class="p">}];</span>
<span class="kd">var</span> <span class="nx">res2</span> <span class="o">=</span> <span class="p">[{</span><span class="na">fullName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">John Smith</span><span class="dl">'</span><span class="p">},</span> <span class="p">{</span><span class="na">fullName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Andrey Koleshko</span><span class="dl">'</span><span class="p">}];</span>
<span class="nx">res1</span> <span class="o">===</span> <span class="nx">res2</span><span class="p">;</span> <span class="c1">// false</span></code></pre></figure>

<p>That‚Äôs why Angular‚Äôs digest cycle will infinitely call the <code class="highlighter-rouge">getUsers</code>. The error message <strong>Error: 10 $digest() iterations reached. Aborting!</strong> informs us about this.</p>

<h2 id="solution">Solution</h2>

<p>To fix the problem we can cache the results of the function. For this purpose I prefer to use <strong>Lo-Dash</strong>‚Äôs <a href="https://lodash.com/docs#memoize">memoize</a> function:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="dl">'</span><span class="s1">plunker</span><span class="dl">'</span><span class="p">,</span> <span class="p">[]);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="dl">'</span><span class="s1">MainCtrl</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="na">firstName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">John</span><span class="dl">'</span><span class="p">,</span> <span class="na">lastName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Smith</span><span class="dl">'</span><span class="p">},</span>
    <span class="p">{</span><span class="na">firstName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Andrey</span><span class="dl">'</span><span class="p">,</span> <span class="na">lastName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Koleshko</span><span class="dl">'</span><span class="p">}</span>
  <span class="p">];</span>

  <span class="nx">$scope</span><span class="p">.</span><span class="nx">getUsers</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">memoize</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="nx">angular</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="na">fullName</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="dl">'</span><span class="s1"> </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">user</span><span class="p">.</span><span class="nx">lastName</span><span class="p">});</span>
    <span class="p">});</span>
    <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
  <span class="p">});</span>
<span class="p">});</span></code></pre></figure>

<p><a href="http://plnkr.co/edit/KBmk4J2ZCt0SsmZlnKZi?p=preview">Demo</a></p>

<h2 id="conclusion">Conclusion</h2>

<p>Using this technique we improve performance of our Angular application, get rid of exception <strong>Error: 10 $digest() iterations reached. Aborting!</strong>, implement functions on <code class="highlighter-rouge">$scope</code> which return an array of objects and the functions can be used in Angular‚Äôs templates.</p>
:ET