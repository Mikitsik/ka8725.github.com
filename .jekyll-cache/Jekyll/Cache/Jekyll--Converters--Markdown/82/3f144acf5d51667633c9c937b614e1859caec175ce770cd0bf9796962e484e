I"S<p>There are some people who give advice to not use rails generators and create models, controllers and etc. things manually. I don’t agree with them and my advice here is to figure out deeply how they work and then make conclusion.</p>

<p>In this post I will describe the most often and useful generator - it’s a model generator. I bet if you don’t use rails generators yet this post will make you to change your work. Using Rails generators saves your time, increases performance, helps to get consistent data for your application.</p>

<h2 id="basic-usage">Basic usage</h2>

<p>Let’s start with simple example:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rails g model user email
</code></pre></div></div>

<p>This command will generate <em>user</em> model with <em>email</em> field type of <em>string</em>, migration which creates <em>users</em> table, test for model and factory (if you have it). You are able to generate model with few fields like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rails g model user first_name last_name email
</code></pre></div></div>

<p>This example will generate yet model with 3 string fields: first_name, last_name and email.</p>

<p>If you want to have model with different type of string pass type after field name following by : and type. Example:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rails g model user email age:integer
</code></pre></div></div>

<p>The whole list of available types:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>integer
primary_key
decimal
float
boolean
binary
string
text
date
time
datetime
timestamp
</code></pre></div></div>

<p>You are able to pass <em>–option</em> parameter to generator. It will inherit generating class from passed name to achieve STI (sing table inheritance):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rails g model admin --parent user
</code></pre></div></div>

<p>This example generates model:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Admin</span> <span class="o">&lt;</span> <span class="no">User</span>
<span class="k">end</span></code></pre></figure>

<p>Interesting fact that if you generate model in some scope passing model like <em>admin/user</em> or <em>Admin::User</em>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rails g model admin/user
</code></pre></div></div>

<p>you will get generated model in scope <em>app/models/admin/user.rb</em>, defined scope <em>app/models/admin.rb</em> which is requred to define module. Let’s see to the content of generated module:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">module</span> <span class="nn">Admin</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">table_name_prefix</span>
    <span class="s1">'admin_'</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>It means that generated table name for <em>Admin::User</em> starts with prefix <em>admin_users</em>. This feature allows to have separated namespaced models as in rails code as in db schema. Very convenient and useful feature for multimodule applications for my opinion.</p>

<h2 id="advanced-usage">Advanced usage</h2>

<p>Sometimes you have to automatically add index for columns in your migration. It’s not a problem:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rails g model user email:index location_id:integer:index
</code></pre></div></div>

<p>Or uniq index:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rails g model user pseudo:string:uniq
</code></pre></div></div>

<p>Set limit for field of integer, string, text and binary fields:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rails generate model user pseudo:string{30}
</code></pre></div></div>

<p>Special syntax to generate decimal field with scale and precision:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rails generate model product 'price:decimal{10,2}'
</code></pre></div></div>

<blockquote>
  <p>Pay attention that you have to wrap parameter <code class="highlighter-rouge">price:decimal{10,2}</code> to quotes. It’s vital and you may have incorrect behavior of generator if you don’t do it. Full explanation of this case is <a href="https://github.com/rails/rails/pull/12642">here</a>.</p>
</blockquote>

<p>You can combine any single curly brace option with the index options:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rails generate model user username:string{30}:uniq
</code></pre></div></div>

<p>And the last useful feature of generators - it’s options to generate reference columns (fields which are used in rails as foreign keys):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rails generate model photo album:references
</code></pre></div></div>

<p>This command will generate <em>photos</em> table with integer field <em>album_id</em> and also it will add index for this field automatically. Make sure in it by looking at generated migration:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">CreatePhotos</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="n">create_table</span> <span class="ss">:photos</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
      <span class="n">t</span><span class="p">.</span><span class="nf">references</span> <span class="ss">:album</span>

      <span class="n">t</span><span class="p">.</span><span class="nf">timestamps</span>
    <span class="k">end</span>
    <span class="n">add_index</span> <span class="ss">:photos</span><span class="p">,</span> <span class="ss">:album_id</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>For polymorphic reference use this syntax:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rails generate model product supplier:references{polymorphic}
</code></pre></div></div>

<p>Polymorphic reference with indexes:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ rails generate model product supplier:references{polymorphic}:index
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>As you see there a lot of useful things in rails model generator which can decrease your developing time. Thank you for reading this trolling post but anyway I hope you find it useful because I didn’t find any similar post or literature which describes rails model generator fully.</p>

<p>PS. Foundation for this post was got from <a href="https://github.com/rails/rails/blob/master/railties/lib/rails/generators/rails/model/USAGE">this</a> rails description usage which is located only in sources of rails on github.</p>
:ET