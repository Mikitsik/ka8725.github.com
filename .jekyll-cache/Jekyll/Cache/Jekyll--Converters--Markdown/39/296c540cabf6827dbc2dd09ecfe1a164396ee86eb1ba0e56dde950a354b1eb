I"ŒB<p>If you havenâ€™t noticed yet that there is a good solution passing <em>Rails</em> variables from controllers to javascript I will be happy to make you fun with <a href="https://github.com/gazay/gon">gon</a>. In this post I will show how to use it with controllerâ€™s filters in a clean, dry and the best way. This approach will help you to avoid growing controllers in a big monsters.</p>

<h2 id="using-filters-in-contollers">Using filters in contollers</h2>

<p>If you donâ€™t know what is contoller filters and how use them, checkout <a href="http://guides.rubyonrails.org/action_controller_overview.html#filters">oficial documentation</a>. In our case we have to know that there are posibilities to apply filters for one action and this one form of using:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">before_filter</span> <span class="no">LoginFilter</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">LoginFilter</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">filter</span><span class="p">(</span><span class="n">controller</span><span class="p">)</span>
    <span class="k">unless</span> <span class="n">controller</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="ss">:logged_in?</span><span class="p">)</span>
      <span class="n">controller</span><span class="p">.</span><span class="nf">flash</span><span class="p">[</span><span class="ss">:error</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"You must be logged in"</span>
      <span class="n">controller</span><span class="p">.</span><span class="nf">redirect_to</span> <span class="n">controller</span><span class="p">.</span><span class="nf">new_login_url</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<h2 id="using-gon">Using Gon</h2>

<p>Say, we have to pass <em>location</em> model as a json object from server side to client side (from rails controller to javascript). With <em>gon</em> we can reduce it to:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">ProductsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">show</span>
    <span class="vi">@product</span> <span class="o">=</span> <span class="no">Product</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>
    <span class="n">gon</span><span class="p">.</span><span class="nf">locations</span> <span class="o">=</span> <span class="vi">@product</span><span class="p">.</span><span class="nf">locations</span><span class="p">.</span><span class="nf">as_json</span><span class="p">(</span><span class="ss">:only</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="ss">:latitude</span><span class="p">,</span> <span class="ss">:longitude</span><span class="p">],</span> <span class="ss">:methods</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="ss">:address</span><span class="p">])</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>Everything is ok, but if we have to pass a lot of variables to javascript we will get a fat controller. Also itâ€™s not easy to test controllers. So my solution will be to use <code class="highlighter-rouge">before_filter</code> here. Here is a example of fat controllerâ€™s action:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">  <span class="k">def</span> <span class="nf">show</span>
    <span class="n">gon</span><span class="p">.</span><span class="nf">locations</span> <span class="o">=</span> <span class="vi">@product</span><span class="p">.</span><span class="nf">locations</span><span class="p">.</span><span class="nf">as_json</span><span class="p">(</span><span class="ss">:only</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="ss">:latitude</span><span class="p">,</span> <span class="ss">:longitude</span><span class="p">],</span> <span class="ss">:methods</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="ss">:address</span><span class="p">])</span>
    <span class="n">gon</span><span class="p">.</span><span class="nf">current_user</span> <span class="o">=</span> <span class="n">current_user</span><span class="p">.</span><span class="nf">as_json</span><span class="p">(</span><span class="ss">:only</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="ss">:email</span><span class="p">,</span> <span class="ss">:id</span><span class="p">])</span>
    <span class="n">gon</span><span class="p">.</span><span class="nf">redirect_path</span> <span class="o">=</span> <span class="n">users_path</span>
    <span class="n">gon</span><span class="p">.</span><span class="nf">global_variables</span> <span class="o">=</span> <span class="p">{</span>
      <span class="ss">:subdomain</span> <span class="o">=&gt;</span> <span class="vi">@product</span><span class="p">.</span><span class="nf">subdomain</span><span class="p">,</span>
      <span class="ss">:statistic</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="ss">:count_hints</span> <span class="o">=&gt;</span> <span class="vi">@product</span><span class="p">.</span><span class="nf">count_hints</span><span class="p">,</span>
        <span class="ss">:count_logins</span> <span class="o">=&gt;</span> <span class="n">current_user</span><span class="p">.</span><span class="nf">count_logins</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">gon</span><span class="p">.</span><span class="nf">image_uploader</span> <span class="o">=</span> <span class="p">{</span>
      <span class="ss">:create_path</span> <span class="o">=&gt;</span> <span class="n">product_path</span><span class="p">(</span><span class="vi">@product</span><span class="p">),</span>
      <span class="ss">:image_tempale</span> <span class="o">=&gt;</span> <span class="n">render_to_string</span><span class="p">(</span><span class="ss">:partial</span> <span class="o">=&gt;</span> <span class="s1">'image'</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="c1"># etc. and etc.</span>
  <span class="k">end</span></code></pre></figure>

<p>This code looks too bad and I donâ€™t know how you fill when you see it, but my brain explodes.</p>

<h2 id="useing-gon-in-a-dry-way">Useing Gon in a DRY way</h2>

<p>So go down to business and make something with this peace of ugly code. Letâ€™s create <code class="highlighter-rouge">LocationGonFilter</code> class and move it to <code class="highlighter-rouge">app/filters</code> folder. You should create this folder if you donâ€™t have it.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">LocationGonFilter</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">filter</span><span class="p">(</span><span class="n">controller</span><span class="p">)</span>
    <span class="k">return</span> <span class="k">unless</span> <span class="n">controller</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="ss">:gon</span><span class="p">)</span>

    <span class="n">gon</span> <span class="o">=</span> <span class="n">controller</span><span class="p">.</span><span class="nf">gon</span>

    <span class="k">if</span> <span class="n">resource</span> <span class="o">=</span> <span class="n">controller</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="ss">:resource</span><span class="p">)</span>
      <span class="k">if</span> <span class="n">resource</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="ss">:locations</span><span class="p">)</span>
        <span class="n">gon</span><span class="p">.</span><span class="nf">locations</span> <span class="o">||=</span> <span class="p">[]</span>
        <span class="n">gon</span><span class="p">.</span><span class="nf">locations</span> <span class="o">|=</span> <span class="n">resource</span><span class="p">.</span><span class="nf">locations</span><span class="p">.</span><span class="nf">as_json</span><span class="p">(</span><span class="ss">:only</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="ss">:latitude</span><span class="p">,</span> <span class="ss">:longitude</span><span class="p">],</span> <span class="ss">:methods</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="ss">:address</span><span class="p">])</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>After this we can refactor our controller:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">ProductsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="n">before_filter</span> <span class="no">LocationGonFilter</span><span class="p">,</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="ss">:show</span><span class="p">]</span>

  <span class="k">def</span> <span class="nf">show</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">resource</span>
    <span class="vi">@product</span> <span class="o">||=</span> <span class="no">Product</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="ss">:id</span><span class="p">])</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>Test for this filter will be look like this:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">'spec_helper'</span>

<span class="n">describe</span> <span class="no">LocationGonFilter</span> <span class="k">do</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:controller</span><span class="p">)</span> <span class="p">{</span> <span class="n">double</span><span class="p">(</span><span class="ss">:some_controller</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:gon</span><span class="p">)</span> <span class="p">{</span> <span class="n">double</span><span class="p">(</span><span class="ss">:gon</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:resource</span><span class="p">)</span> <span class="p">{</span> <span class="n">double</span><span class="p">(</span><span class="ss">:resource</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:locations</span><span class="p">)</span> <span class="p">{</span> <span class="p">[</span><span class="n">create</span><span class="p">(</span><span class="ss">:location</span><span class="p">),</span> <span class="n">create</span><span class="p">(</span><span class="ss">:location</span><span class="p">,</span> <span class="ss">:address2</span> <span class="o">=&gt;</span> <span class="s1">'suite 2'</span><span class="p">)]</span> <span class="p">}</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:json_locations</span><span class="p">)</span> <span class="p">{</span> <span class="n">locations</span><span class="p">.</span><span class="nf">as_json</span><span class="p">(</span><span class="ss">:only</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="ss">:latitude</span><span class="p">,</span> <span class="ss">:longitude</span><span class="p">],</span> <span class="ss">:methods</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="ss">:address</span><span class="p">])</span> <span class="p">}</span>

  <span class="n">context</span> <span class="ss">:without_gon</span> <span class="k">do</span>
    <span class="n">it</span> <span class="p">{</span> <span class="n">expect</span> <span class="p">{</span> <span class="no">LocationGonFilter</span><span class="p">.</span><span class="nf">filter</span><span class="p">(</span><span class="n">controller</span><span class="p">)</span> <span class="p">}.</span><span class="nf">to_not</span> <span class="n">raise_error</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="n">context</span> <span class="ss">:with_gon</span> <span class="k">do</span>
    <span class="n">before</span> <span class="p">{</span> <span class="n">controller</span><span class="p">.</span><span class="nf">stub</span><span class="p">(</span><span class="ss">:gon</span><span class="p">).</span><span class="nf">and_return</span><span class="p">(</span><span class="n">gon</span><span class="p">)</span> <span class="p">}</span>
    <span class="n">before</span> <span class="p">{</span> <span class="n">gon</span><span class="p">.</span><span class="nf">stub</span><span class="p">(</span><span class="ss">:locations</span><span class="p">).</span><span class="nf">and_return</span><span class="p">([])</span> <span class="p">}</span>
    <span class="n">before</span> <span class="p">{</span> <span class="n">controller</span><span class="p">.</span><span class="nf">stub</span><span class="p">(</span><span class="ss">:resource</span><span class="p">).</span><span class="nf">and_return</span><span class="p">(</span><span class="n">resource</span><span class="p">)</span> <span class="p">}</span>

    <span class="n">context</span> <span class="ss">:filter</span> <span class="k">do</span>
      <span class="n">it</span> <span class="p">{</span> <span class="n">expect</span> <span class="p">{</span> <span class="no">LocationGonFilter</span><span class="p">.</span><span class="nf">filter</span><span class="p">(</span><span class="n">controller</span><span class="p">)</span> <span class="p">}.</span><span class="nf">to_not</span> <span class="n">change</span><span class="p">(</span><span class="n">gon</span><span class="p">,</span> <span class="ss">:locations</span><span class="p">)</span> <span class="p">}</span>

      <span class="n">it</span> <span class="k">do</span>
        <span class="n">resource</span><span class="p">.</span><span class="nf">stub</span><span class="p">(</span><span class="ss">:locations</span><span class="p">).</span><span class="nf">and_return</span><span class="p">(</span><span class="n">locations</span><span class="p">)</span>
        <span class="n">gon</span><span class="p">.</span><span class="nf">stub</span><span class="p">(</span><span class="ss">:locations</span><span class="o">=</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">args</span><span class="o">|</span>
          <span class="n">gon</span><span class="p">.</span><span class="nf">stub</span><span class="p">(</span><span class="ss">:locations</span><span class="p">).</span><span class="nf">and_return</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
        <span class="k">end</span>
        <span class="no">LocationGonFilter</span><span class="p">.</span><span class="nf">filter</span><span class="p">(</span><span class="n">controller</span><span class="p">)</span>
        <span class="n">gon</span><span class="p">.</span><span class="nf">locations</span><span class="p">.</span><span class="nf">should</span> <span class="n">eq</span><span class="p">(</span><span class="n">json_locations</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<blockquote>
  <p>Iâ€™m using FactoryGirl here to create locations</p>
</blockquote>

<p>PS. I believe that every class should be responsible for only one thing (this is a <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">Single responsibility principle (SRP)</a>). In my post Iâ€™ve explained how to achieve it for controller layer. Filters are separated layer and there we should filter parameters, controllers should inly listen requests, pass action to bottom layer (model) and then response on request, they should not contain complidated logic</p>
:ET