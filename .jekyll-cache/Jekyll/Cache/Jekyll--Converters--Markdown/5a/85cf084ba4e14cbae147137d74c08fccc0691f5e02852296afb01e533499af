I"≥<p>Since Rails 4 supports PostgreSQL array type out of the box it would be great to have an opportunity to use it for getting from a form on client side an array of text fields (it may be collection of zips, for example) and pass it to a model. I love <a href="https://github.com/plataformatec/simple_form">SimpleForm gem</a> to generate a form in Rails but it allows to generate only collection of radio buttons or checkboxes and unfortunately it doesn‚Äôt support the functionality. In this post I will show how to solve the problem.</p>

<h2 id="problem">Problem</h2>

<p>This screenshot will explain what I have to do without any words:</p>

<p><img src="/images/zips.jpg" alt="Account and User relation" /></p>

<p>In database I‚Äôm going to use <a href="http://blog.plataformatec.com.br/2014/07/rails-4-and-postgresql-arrays/">PostgreSQL arrays in ActiveRecord</a> for saving the data. But in the view we don‚Äôt have some tool to generate the fields with Rails out of the box. So let‚Äôs do it with SimpleForm.</p>

<h2 id="simpleform-and-custom-inputs">SimpleForm and custom inputs</h2>

<p>It may not be surprise for you, but SimpleForm gives us possibility to define our own <a href="https://github.com/plataformatec/simple_form/wiki/Custom-inputs-examples">custom input</a>. It‚Äôs very easy to do it: just define your own class inherited from base SimpleForm‚Äôs input and call when generating inputs.</p>

<p>This is the custom attribute for the array input:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">ArrayInput</span> <span class="o">&lt;</span> <span class="no">SimpleForm</span><span class="o">::</span><span class="no">Inputs</span><span class="o">::</span><span class="no">StringInput</span>
  <span class="k">def</span> <span class="nf">input</span>
    <span class="n">input_html_options</span><span class="p">[</span><span class="ss">:type</span><span class="p">]</span> <span class="o">||=</span> <span class="n">input_type</span>

    <span class="no">Array</span><span class="p">(</span><span class="n">object</span><span class="p">.</span><span class="nf">public_send</span><span class="p">(</span><span class="n">attribute_name</span><span class="p">)).</span><span class="nf">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">array_el</span><span class="o">|</span>
      <span class="vi">@builder</span><span class="p">.</span><span class="nf">text_field</span><span class="p">(</span><span class="kp">nil</span><span class="p">,</span> <span class="n">input_html_options</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="ss">value: </span><span class="n">array_el</span><span class="p">,</span> <span class="ss">name: </span><span class="s2">"</span><span class="si">#{</span><span class="n">object_name</span><span class="si">}</span><span class="s2">[</span><span class="si">#{</span><span class="n">attribute_name</span><span class="si">}</span><span class="s2">][]"</span><span class="p">))</span>
    <span class="k">end</span><span class="p">.</span><span class="nf">join</span><span class="p">.</span><span class="nf">html_safe</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">input_type</span>
    <span class="ss">:text</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>In the form use this example to generate a collection of text fields:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">form_for</span> <span class="vi">@location</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
  <span class="n">f</span><span class="p">.</span><span class="nf">input</span> <span class="ss">:zips</span><span class="p">,</span> <span class="ss">as: :array</span>
<span class="k">end</span></code></pre></figure>

<p>One note here is that the <code class="highlighter-rouge">@location</code> object must have the <code class="highlighter-rouge">zips</code> attributes and it should be an array. If you have not empty array of <code class="highlighter-rouge">zips</code> this peace of code will generate them in a form. I you have an empty array of <code class="highlighter-rouge">zips</code> you will have to worry about how to initialize the attribute on the server before rendering a form.</p>

<p>All the generated inputs will get name like this: <code class="highlighter-rouge">location[zips][]</code>. And all of them will have the same name. Browser will  join them together before sending to a server. Rails will understand that this is an array of inputs because their names ending with <code class="highlighter-rouge">[]</code>. Finally you will get a parameter of an array in <code class="highlighter-rouge">params</code> controllers‚Äô object. It means that you will be able to get the values in a controller with this code: <code class="highlighter-rouge">params[:location][:zips]</code>.</p>

<p>We‚Äôve just being said that the browser will join parameters in one line with the same name and this is an example how they will go to the server: <code class="highlighter-rouge">"location[zips][]=11111&amp;location[zips][]=22222"</code>. Rails will parse their into a hash with
<code class="highlighter-rouge">Rack::Utils.parse_nested_query</code> method. Let‚Äôs summarize to understand the process and to see the results of the parsing attributes:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="vg">$irb</span> <span class="o">--</span><span class="n">simple</span><span class="o">-</span><span class="n">prompt</span>
<span class="o">&gt;&gt;</span> <span class="nb">require</span> <span class="s1">'rack'</span>
<span class="o">=&gt;</span> <span class="kp">true</span>
<span class="o">&gt;&gt;</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Utils</span><span class="p">.</span><span class="nf">parse_nested_query</span> <span class="s2">"location[zips][]=11111&amp;location[zips][]=22222"</span>
<span class="o">=&gt;</span> <span class="p">{</span><span class="s2">"location"</span><span class="o">=&gt;</span><span class="p">{</span><span class="s2">"zips"</span><span class="o">=&gt;</span><span class="p">[</span><span class="s2">"11111"</span><span class="p">,</span> <span class="s2">"22222"</span><span class="p">]}}</span></code></pre></figure>

<p>If you use <a href="http://edgeapi.rubyonrails.org/classes/ActionController/StrongParameters.html">StrongParameters</a> to filter out parameters going from a client you may be interested how to manage this. It‚Äôs very simple task - just don‚Äôt forget to identify that you are expecting array rather than one attribute:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">params</span><span class="p">.</span><span class="nf">require</span><span class="p">(</span><span class="ss">:location</span><span class="p">).</span><span class="nf">permit</span><span class="p">(</span><span class="ss">zips: </span><span class="p">[])</span></code></pre></figure>

<p>Note the <code class="highlighter-rouge">[]</code> is after the <code class="highlighter-rouge">zips:</code> - it‚Äôs necessary to not forget to write it like this. In other case (if you write <code class="highlighter-rouge">permit(:zips)</code>, for example) you will get an exception because an array goes from server but StrongParameters expects a single object in such definition.</p>

<blockquote>
  <p>Implementing ‚Äú+Add another‚Äù link won‚Äôt be described in this post because it‚Äôs rather trivial task. You will have to write a little JavaScript and it‚Äôs up to you.</p>
</blockquote>

<p>Hope this article will help somebody.</p>
:ET