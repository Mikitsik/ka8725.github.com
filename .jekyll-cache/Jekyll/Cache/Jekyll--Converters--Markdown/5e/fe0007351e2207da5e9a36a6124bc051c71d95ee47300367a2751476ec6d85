I"d<p>Imagine that we have <em>Trademarks</em> controller with <em>index</em> action. But in this action we shouldn’t get all trademarks. Rather than all objects we have to get all <em>active trademarks</em> which are <em>accessible by current user only</em>. This is a challenge which I’m going to solve here.</p>

<h2 id="the-sledge-hammer">The sledge-hammer</h2>

<p>The simplest solution will be something like this:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">TrademarksController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span>
    <span class="vi">@trademarks</span> <span class="o">=</span> <span class="no">Trademark</span><span class="p">.</span><span class="nf">where</span> <span class="ss">:active</span> <span class="o">=&gt;</span> <span class="kp">true</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>One day we have to change our conditions for select trademarks:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">TrademarksController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span>
    <span class="vi">@trademarks</span> <span class="o">=</span> <span class="no">Trademark</span><span class="p">.</span><span class="nf">where</span> <span class="ss">:active</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:owner_id</span> <span class="o">=&gt;</span> <span class="n">current_user</span><span class="p">.</span><span class="nf">id</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>Of course we can define here scope on the <em>Trademark</em> model but this will not save us from changes in the controller - we still has chance to edit index action in the feature. For example, we would have to combine two scopes there.</p>

<h2 id="dry-solution">DRY solution</h2>

<p>There is a better solution which can help us to avoid these repetitive task. But this solution is achieved by installing the <em>cancan</em> gem. I hope you don’t hate this gem and able to add it to the project.</p>

<p>So, the first step for this solution as you have already guessed will be installing <em>cancan</em> - add it to the <em>Gemfile</em> and install it running <em>bundle install</em> command in your terminal. Initialize it with <em>rails g cancan:ability</em>.</p>

<p>Open <em>/app/models/ability.rb</em> file and define there abilities. Let’s do it:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Ability</span>
  <span class="kp">include</span> <span class="no">CanCan</span><span class="o">::</span><span class="no">Ability</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="n">user</span> <span class="o">||=</span> <span class="no">User</span><span class="p">.</span><span class="nf">new</span>
    <span class="n">can</span> <span class="ss">:read</span><span class="p">,</span> <span class="no">Trademark</span><span class="p">,</span> <span class="ss">:active</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:owner_id</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="p">.</span><span class="nf">id</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>Currently we are on the last step. We have to refactor controller now - use <em>accessible_by</em> method which is provided by <em>cancan</em>:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">TrademarksController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">index</span>
    <span class="vi">@trademarks</span> <span class="o">=</span> <span class="no">Trademark</span><span class="p">.</span><span class="nf">accessible_by</span><span class="p">(</span><span class="n">current_ability</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>Implementation of the <em>accessible_by</em> method is too simple:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">accessible_by</span><span class="p">(</span><span class="n">ability</span><span class="p">,</span> <span class="n">action</span> <span class="o">=</span> <span class="ss">:index</span><span class="p">)</span>
  <span class="n">ability</span><span class="p">.</span><span class="nf">model_adapter</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="n">action</span><span class="p">).</span><span class="nf">database_records</span>
<span class="k">end</span></code></pre></figure>

<p>It just fetches records from the database according specified scopes in the abilities. Pay attention that you are able to pass any action here, not only index action as I did.</p>

<p>Here we are. The code in the controller’s action won’t be changed so often as it was before. I think, that we reduced possibility to changes for this action as far as possible.</p>

<p>There is an one constraint here - you are not able to use abilities which are defined with blocks (please, read this <a href="https://github.
com/ryanb/cancan/wiki/Defining-Abilities-with-Blocks">doc</a> how to define abilities).</p>

<p>Fetching Records technique documentation is described <a href="https://github.com/ryanb/cancan/wiki/Fetching-Records">here</a>.</p>
:ET