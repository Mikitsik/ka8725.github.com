I"k.<p>Since Ruby On Rails 3 released I had a problems with deploy configuring like assets precompile. Of course if you deploy application to powerful <strong>host</strong> you won’t have any problems and deployment to such <strong>host</strong> will be standart and simple. But if you have server with not much RAM (less 1 Gb) you will have to waiting long time till assets precompiled. So, here I will tell how to avoid precompiling assets on the server and decrease time for deployment.</p>

<h2 id="1-free-hosting">1. Free hosting</h2>

<p>If you haven’t already known <strong>free ruby hosting</strong> I would recomend you to use <a href="http://heroku.com">heroku</a>. It’s a beatiful <strong>freehosting</strong> which provides deploy <strong>Rack/Ruby On Rails</strong> applications.
<img src="/images/heroku.jpg" alt="Free ruby hosting" />
I won’t describe how it works here because you can find a lot of information about it on the oficial site.</p>

<p>I have been use <strong>free account</strong> for a months for my blog which you are reading now and I won’t have any issues with server fails, long loading or like that. Sometimes it was about 1000 visitors per hour and everything has done. So I think it will be enough <strong>free account</strong> for your starting services or staging/qa environments. If you haven’t enough memory you can buy <a href="http://devcenter.heroku.com/articles/dynos">web dyno</a> for 36$ per month. Also you are able to install <a href="https://addons.heroku.com/">add-ons</a> - it’s a wonderful <strong>heroku</strong>’s feature which saves your time with installing and configuring additional applications required for your application such as:</p>

<ul>
  <li><strong>Free email services</strong></li>
  <li><strong>Scheduling</strong></li>
  <li><strong>Databases</strong></li>
  <li><strong>Search engines</strong></li>
  <li>and etc.</li>
</ul>

<p>NOTE: there are restrictions for every add-on.</p>

<p>I hope you have already signed up here and ready to the next step.</p>

<h2 id="2-assets-bucket">2. Assets bucket</h2>
<p>There are many variants to precompile assets and connect them with <strong>Rails 3</strong> application:</p>

<ol>
  <li>You can precompile assets on your local machine and make commit. But I think it is bad idea because you will have fat commits if any js/css change</li>
  <li>Precompiling assets during deploy on the server. Requires instance with at least 1 Gb memory and access to write files in assets directory</li>
  <li>Include assets directory in ignore for your VCS (Version Control Systems), precompile assets upload assets to the <strong>assets bucket</strong>. <strong>Assets bucket</strong> it’s a server which allow to save static data and get it through public url</li>
</ol>

<p>I prefer 3rd variant because <strong>heroku</strong> doesn’t allow to save any files on the instance. Also 1 <strong>free web dyno</strong> has only 512 MB memory. To save assets in the bucket we should choose server with API for our issue. There are a lot of services in the internet: AWS S3, Dropbox, Rackspace Cloud Files and etc. It will be simple to use Dropbox for our problem: you have precompiled assets, you just copy them to Dropbox public folder, say to your application where it should look for assets and that’s it! But I prefer use S3 because I calculated that it will be cheaper for me in the feature.</p>

<h2 id="3-amazon-s3">3. Amazon S3</h2>

<ul>
  <li>Go to <a href="http://aws.amazon.com/">AWS</a> and sign up there. Credit card with positive balanse is required</li>
  <li>Go to <a href="https://console.aws.amazon.com/s3/home?#">AWS console</a>, choose S3 tab and create bucket</li>
</ul>

<p><img src="/images/aws_s3_console.jpg" alt="S3 bucket" /></p>

<p>NOTE: there are variants of regions where to store bucket. So choose nearest for your feature visitors to have better response from server</p>

<ul>
  <li>Go to <strong>CloudFront</strong> tab and create distribution for your bucket</li>
</ul>

<p><img src="/images/aws_s3_console-2.jpg" alt="CloudFront distribution" /></p>

<p>Please, wait for status changed to Deployed and State to Enabled. It will take a few minutes (usual it is 5-10 minutes)</p>

<h2 id="4-deployment">4. Deployment</h2>

<p>To upload assets in the bucket I use gem <strong>jammit-s3</strong>. It is simple to configure and to use.</p>

<ul>
  <li>Add it your gem file this line: <strong>gem ‘jammit-s3’, :group =&gt; :development</strong></li>
  <li>Install new gem by typing command <strong>bundle</strong> in terminal</li>
  <li>Go to <a href="https://aws-portal.amazon.com/gp/aws/securityCredentials">AWS security credentials</a> page and get there <strong>Access Key Id</strong> and <strong>Secret Access Key</strong> and create shell variables AWS_KEY and AWS_SECRET (steps 4-5)</li>
  <li>**export AWS_KEY=YOUR_ACEESS_KEY_ID **</li>
  <li><strong>export AWS_SECRET=YOUR_SECRET_ACCESS_KEY</strong></li>
  <li>Create file <strong>config/assets.yml</strong> with content:</li>
</ul>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="ss">s3_bucket: </span><span class="no">YOUR_BUCKET_HERE</span>
<span class="ss">s3_access_key_id: </span><span class="o">&lt;</span><span class="sx">%= ENV['AWS_KEY'] %&gt;
s3_secret_access_key: &lt;%=</span> <span class="no">ENV</span><span class="p">[</span><span class="s1">'AWS_SECRET'</span><span class="p">]</span> <span class="o">%&gt;</span>
<span class="ss">s3_upload_files:
  </span><span class="o">-</span>  <span class="kp">public</span><span class="sr">/assets/</span><span class="o">**</span><span class="sr">/*</span></code></pre></figure>

<ul>
  <li>Edit your <strong>config/environments/production.rb</strong> file:</li>
</ul>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">MyApplication</span><span class="o">::</span><span class="no">Application</span><span class="p">.</span><span class="nf">configure</span> <span class="k">do</span>
  <span class="c1"># Code is not reloaded between requests</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">cache_classes</span> <span class="o">=</span> <span class="kp">true</span>
  <span class="c1"># Full error reports are disabled and caching is turned on</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">consider_all_requests_local</span>       <span class="o">=</span> <span class="kp">false</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">action_controller</span><span class="p">.</span><span class="nf">perform_caching</span> <span class="o">=</span> <span class="kp">true</span>
  	<span class="c1"># Disable Rails's static asset server (Apache or nginx will already do this)</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">serve_static_assets</span> <span class="o">=</span> <span class="kp">false</span>
  <span class="c1"># Compress JavaScripts and CSS</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">assets</span><span class="p">.</span><span class="nf">compress</span> <span class="o">=</span> <span class="kp">true</span>
  <span class="c1"># Don't fallback to assets pipeline if a precompiled asset is missed</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">assets</span><span class="p">.</span><span class="nf">compile</span> <span class="o">=</span> <span class="kp">false</span>
  <span class="c1"># Generate digests for assets URLs</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">assets</span><span class="p">.</span><span class="nf">digest</span> <span class="o">=</span> <span class="kp">true</span>
  <span class="c1"># Specifies the header that your server uses for sending files</span>
  <span class="c1"># config.action_dispatch.x_sendfile_header = "X-Sendfile" # for apache</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">action_dispatch</span><span class="p">.</span><span class="nf">x_sendfile_header</span> <span class="o">=</span> <span class="s1">'X-Accel-Redirect'</span> <span class="c1"># for nginx</span>
  <span class="c1"># Enable serving of images, stylesheets, and JavaScripts from an asset server</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">action_controller</span><span class="p">.</span><span class="nf">asset_host</span> <span class="o">=</span> <span class="s2">"http://YOUR_BUCKET_NAME.s3.amazonaws.com"</span>
  <span class="c1"># Enable locale fallbacks for I18n (makes lookups for any locale fall back to</span>
  <span class="c1"># the I18n.default_locale when a translation can not be found)</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">i18n</span><span class="p">.</span><span class="nf">fallbacks</span> <span class="o">=</span> <span class="kp">true</span>
  <span class="c1"># Send deprecation notices to registered listeners</span>
  <span class="n">config</span><span class="p">.</span><span class="nf">active_support</span><span class="p">.</span><span class="nf">deprecation</span> <span class="o">=</span> <span class="ss">:notify</span>
<span class="k">end</span></code></pre></figure>

<blockquote>
  <p>Pay attention on <strong>config.action_controller.asset_host</strong>, it should be your bucket url!</p>
</blockquote>

<ul>
  <li>
    <p>Add <strong>public/assets</strong> to <strong>.gitignore</strong>:</p>

    <p>/public/assets</p>
  </li>
</ul>

<p>In production mode file <em>manifest.yml</em> is required. It generates to the <em>/public/assets</em> folder when assets are precompiling.
I see the nice solution in changing path for <em>manifest.yml</em> file. Go to the <strong>config/environments/production.rb</strong> and edit it like this way:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># ...</span>
<span class="c1"># Defaults to Rails.root.join("public/assets")</span>
<span class="n">config</span><span class="p">.</span><span class="nf">assets</span><span class="p">.</span><span class="nf">manifest</span> <span class="o">=</span> <span class="s1">'public/manifest'</span>
<span class="c1"># ...</span></code></pre></figure>

<p>We have ready to <strong>deploy</strong> application. Let’s precompile assets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">RAILS_ENV</span><span class="o">=</span><span class="n">production</span> <span class="n">rake</span> <span class="n">assets</span><span class="ss">:precompile</span> <span class="o">--</span><span class="n">trace</span></code></pre></figure>

<p>Upload assets to S3 is very simple:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">jammit</span><span class="o">-</span><span class="n">s3</span></code></pre></figure>

<p>Create <strong>heroku application</strong>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>heroku create
</code></pre></div></div>

<p>Make commit, and push it to the heroku:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git commit -am 'assets precompiled'
git push heroku master
</code></pre></div></div>

<p>Default DB for heroku application is <em>postgresql</em>. If you would like to change it install preferred for you add-on.</p>

<p>Of course you should run migrations if your application has it:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>heroku run rake db:migrate
heroku run rake db:seed # if you have required seeds
</code></pre></div></div>

<p>I hope this post will be useful not only for me. Thanks for reading!</p>
:ET